// Date: 09/07/2012 2:01:52 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package com.bioxx.tfc.Render.Models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelPart;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

import org.lwjgl.opengl.GL11;

import com.bioxx.tfc.Core.TFC_Core;
import com.bioxx.tfc.Entities.Mobs.EntityDeer;
import com.bioxx.tfc.api.Entities.IAnimal;
import com.bioxx.tfc.api.Entities.IAnimal.GenderEnum;
public class ModelDeer extends ModelBase
{
	//fields
	private ModelPart antler24;
	private ModelPart antler23;
	private ModelPart antler22;
	private ModelPart antler21;
	private ModelPart antler14;
	private ModelPart antler13;
	private ModelPart antler12;
	private ModelPart antler11;
	private ModelPart hoof2;
	private ModelPart toes3;
	private ModelPart thigh1;
	private ModelPart ear2;
	private ModelPart ear1;
	private ModelPart calf2;
	private ModelPart tail;
	private ModelPart collar;
	private ModelPart upperLeg4;
	private ModelPart neck;
	private ModelPart rump;
	private ModelPart head;
	private ModelPart body;
	private ModelPart leg1;
	private ModelPart leg2;
	private ModelPart leg3;
	private ModelPart leg4;
	private ModelPart snout;
	private ModelPart torso;
	private ModelPart upperLeg3;
	private ModelPart calf1;
	private ModelPart lowerleg3;
	private ModelPart lowerleg4;
	private ModelPart thigh2;
	private ModelPart toes4;
	private ModelPart toes2;
	private ModelPart toes1;
	private ModelPart hoof1;
	private ModelPart hoof3;
	private ModelPart hoof4;
	private boolean running;

	public ModelDeer()
	{
		textureWidth = 128;
		textureHeight = 64;

		antler24 = new ModelPart(this, 44, 0);
		antler24.addCuboid(-6.8F, -15.4F, -1.8F, 1, 2, 1);
		antler24.setPivot(0F, 0F, 0F);
		antler24.setTextureSize(128, 64);
		antler24.mirror = true;
		setRotation(antler24, 0F, 0F, 0.2792527F);
		antler23 = new ModelPart(this, 44, 0);
		antler23.addCuboid(-2.8F, -11F, 8F, 1, 2, 1);
		//antler23.addCuboid(0F,0F,0F,1,2,1);
		antler23.setPivot(0F, 0F, 0F);
		antler23.setTextureSize(128, 64);
		antler23.mirror = true;
		setRotation(antler23, 0.8726646F, -0.4363323F, 0F);
		antler22 = new ModelPart(this, 44, 0);
		antler22.addCuboid(2.3F, -14.3F, -5.1F, 1, 3, 1);
		antler22.setPivot(0F, 0F, 0F);
		antler22.setTextureSize(128, 64);
		antler22.mirror = true;
		setRotation(antler22, -0.2268928F, 0F, -0.3490659F);
		antler21 = new ModelPart(this, 44, 0);
		antler21.addCuboid(-2F, -13F, -2.5F, 1, 3, 1);
		antler21.setPivot(0F, -1F, -8F);
		antler21.setTextureSize(128, 64);
		antler21.mirror = true;
		setRotation(antler21, 0F, 0F, 0F);
		//antler21.addChild(antler22);
		//antler21.addChild(antler23);
		//antler21.addChild(antler24);
		antler14 = new ModelPart(this, 44, 0);
		antler14.addCuboid(5.8F, -15.4F, -1.8F, 1, 2, 1);
		antler14.setPivot(0F, 0F, 0F);
		antler14.setTextureSize(128, 64);
		antler14.mirror = true;
		setRotation(antler14, 0F, 0F, -0.2792527F);
		antler13 = new ModelPart(this, 44, 0);
		antler13.addCuboid(1.8F, -11F, 8F, 1, 2, 1);
		antler13.setPivot(0F, 0F, 0F);
		antler13.setTextureSize(128, 64);
		antler13.mirror = true;
		setRotation(antler13, 0.8726646F, 0.4363323F, 0F);
		antler12 = new ModelPart(this, 44, 0);
		antler12.addCuboid(-3.3F, -14.3F, -5.1F, 1, 3, 1);
		antler12.setPivot(0F, 0F, 0F);
		antler12.setTextureSize(128, 64);
		antler12.mirror = true;
		setRotation(antler12, -0.2268928F, 0F, 0.3490659F);
		antler11 = new ModelPart(this, 44, 0);
		antler11.addCuboid(1F, -13F, -2.5F, 1, 3, 1);
		antler11.setPivot(0F, -1F, -8F);
		antler11.setTextureSize(128, 64);
		antler11.mirror = true;
		setRotation(antler11, 0F, 0F, 0F);
		//antler11.addChild(antler12);
		//antler11.addChild(antler13);
		//antler11.addChild(antler14);
		//hoof2.mirror = true;		
		toes3 = new ModelPart(this, 18, 22);
		toes3.addCuboid(-0.5F, 0.4F, -3F, 2, 1, 4);
		toes3.setPivot(0F, 5F, 0F);
		toes3.setTextureSize(128, 64);
		setRotation(toes3, 1.134464F, 0F, 0F);
		thigh1 = new ModelPart(this, 40, 22);
		thigh1.addCuboid(-1F, -2.3F, -2F, 2, 9, 5);
		thigh1.setPivot(-3F, 2F, 7F);
		thigh1.setTextureSize(128, 64);
		setRotation(thigh1, -0.1745329F, 0F, 0.1745329F);
		//ear2.mirror = true;
		ear2 = new ModelPart(this, 54, 16);
		ear2.mirror = true;
		ear2.addCuboid(-9F, -10F, -2F, 5, 3, 0);
		ear2.setPivot(0F, 0F, 0F);
		ear2.setTextureSize(128, 64);
		setRotation(ear2, 0F, 0.3490659F, 0.34906585F);
		ear1 = new ModelPart(this, 54, 16);
		ear1.addCuboid(4F, -10F, -2F, 5, 3, 0);
		ear1.setPivot(0F, 0F, 0F);
		ear1.setTextureSize(128, 64);
		setRotation(ear1, 0F, -0.3490659F, -0.34906585F);
		//calf2.mirror = true;
		calf2 = new ModelPart(this, 54, 7);
		calf2.mirror = true;
		calf2.addCuboid(-1F, -1F, 0F, 2, 6, 3);
		calf2.setPivot(0F, 6F, 0F);
		calf2.setTextureSize(128, 64);
		setRotation(calf2, 0.5585054F, 0F, 0F);
		tail = new ModelPart(this, 24, 52);
		tail.addCuboid(-1.5F, -0.5F, 0F, 3, 2, 9);
		tail.setPivot(0F, -1.5F, 10F);
		tail.setTextureSize(128, 64);
		tail.mirror = true;
		setRotation(tail, -1.308997F, 0F, 0F);
		collar = new ModelPart(this, 30, 38);
		collar.addCuboid(0F, -2F, -4F, 4, 6, 7);
		collar.setPivot(-2F, -1F, -8F);
		collar.setTextureSize(128, 64);
		collar.mirror = true;
		setRotation(collar, 1.151917F, 0F, 0F);
		//upperLeg4.mirror = true;
		upperLeg4 = new ModelPart(this, 30, 22);
		upperLeg4.mirror = true;
		upperLeg4.addCuboid(-1.25F, -1F, -1.5F, 2, 5, 3);
		upperLeg4.setPivot(4F, 5F, -7F);
		upperLeg4.setTextureSize(128, 64);

		setRotation(upperLeg4, 0.3490659F, 0F, 0.0349066F);
		neck = new ModelPart(this, 57, 22);
		neck.addCuboid(-2F, -4F, -2F, 4, 5, 8);
		neck.setPivot(0F, -1F, -8F);
		neck.setTextureSize(128, 64);
		neck.mirror = true;
		setRotation(neck, 1.815142F, 0F, 0F);
		rump = new ModelPart(this, 0, 47);
		rump.addCuboid(-3F, -4F, 3F, 6, 10, 6);
		rump.setPivot(0F, 1.5F, 1F);
		rump.setTextureSize(128, 64);
		rump.mirror = true;
		setRotation(rump, -0.0872665F, 0F, 0F);
		head = new ModelPart(this, 54, 35);
		head.addCuboid(-2.5F, -11F, -5F, 5, 6, 6);
		head.setPivot(0F, -1F, -8F);
		head.setTextureSize(128, 64);
		head.mirror = true;
		setRotation(head, 0.1570796F, 0F, 0F);
		head.addChild(ear1);
		head.addChild(ear2);
		body = new ModelPart(this, 18, 4);
		body.addCuboid(-4F, -11F, -8F, 8, 8, 10);
		body.setPivot(0F, 1F, 2F);
		body.setTextureSize(128, 64);
		body.mirror = true;
		setRotation(body, 1.43117F, 0F, 0F);
		leg1 = new ModelPart(this, 0, 16);
		leg1.addCuboid(-0F, -1F, 0F, 2, 9, 2);
		leg1.setPivot(0F, 5F, 0F);
		leg1.setTextureSize(128, 64);
		setRotation(leg1, 0F, 0F, 0F);
		//leg2.mirror = true;
		leg2 = new ModelPart(this, 0, 16);
		leg2.mirror = true;
		leg2.addCuboid(-1F, -1F, 0F, 2, 9, 2);
		leg2.setPivot(0F, 5F, 0F);
		leg2.setTextureSize(128, 64);

		setRotation(leg2, 0F, 0F, 0F);
		leg3 = new ModelPart(this, 8, 16);
		leg3.addCuboid(-0.5F,0F,0F,/*-0.5F, 3F, 0F,*/ 2, 7, 2);
		leg3.setPivot(0F, 3F, -1F);
		leg3.setTextureSize(128, 64);
		setRotation(leg3, 0F, 0F, 0F);
		//leg4.mirror = true;
		leg4 = new ModelPart(this, 8, 16);
		leg4.mirror = true;
		leg4.addCuboid(-1.5F, 0F, 0F, 2, 7, 2);
		leg4.setPivot(0F, 3F, -1F);
		leg4.setTextureSize(128, 64);

		setRotation(leg4,  -0.3490659F, 0F, -0.0349066F);
		snout = new ModelPart(this, 54, 0);
		snout.addCuboid(-1.5F, -9.3F, -9F, 3, 3, 4);
		snout.setPivot(0F, 0F, 0F);
		snout.setTextureSize(128, 64);
		snout.mirror = true;
		//setRotation(snout, 0.1570796F, 0F, 0F);
		head.addChild(snout);
		torso = new ModelPart(this, 0, 29);
		torso.addCuboid(-3.5F, -3F, -5F, 7, 10, 8);
		torso.setPivot(0F, 1F, 2F);
		torso.setTextureSize(128, 64);
		torso.mirror = true;
		setRotation(torso, 0.122173F, 0F, 0F);
		upperLeg3 = new ModelPart(this, 30, 22);
		upperLeg3.addCuboid(-0.7F, -1F, -1.5F, 2, 5, 3);
		upperLeg3.setPivot(-4F, 5F, -7F);
		upperLeg3.setTextureSize(128, 64);
		setRotation(upperLeg3, 0.3490659F, 0F, -0.0349066F);
		calf1 = new ModelPart(this, 54, 7);
		calf1.addCuboid(0F, -1F, 0F, 2, 6, 3);
		calf1.setPivot(0F, 7F, 0F);
		calf1.setTextureSize(128, 64);
		setRotation(calf1, 0.5585054F, 0F, 0F);
		lowerleg3 = new ModelPart(this, 30, 30);
		lowerleg3.addCuboid(-0.5F, 0F, 0F, 2, 6, 2);
		lowerleg3.setPivot(0F, 7F, 0F);
		lowerleg3.setTextureSize(128, 64);
		setRotation(lowerleg3, 0F, 0F, 0F);
		//lowerleg4.mirror = true;
		lowerleg4 = new ModelPart(this, 30, 30);
		lowerleg4.mirror = true;
		lowerleg4.addCuboid(-1.5F, 0F, 0F, 2, 6, 2);
		lowerleg4.setPivot(0F, 7F, 0F);
		lowerleg4.setTextureSize(128, 64);

		setRotation(lowerleg4, 0F, 0F, 0F);
		//thigh2.mirror = true;
		thigh2 = new ModelPart(this, 40, 22);
		thigh2.mirror = true;
		thigh2.addCuboid(-1F, -2.3F, -2F, 2, 9, 5);
		thigh2.setPivot(3F, 2F, 7F);
		thigh2.setTextureSize(128, 64);

		setRotation(thigh2, -0.1745329F, 0F, -0.1745329F);
		//toes4.mirror = true;
		toes4 = new ModelPart(this, 18, 22);
		toes4.mirror = true;
		toes4.addCuboid(-1.5F, 0.4F, -3F, 2, 1, 4);
		toes4.setPivot(0F, 5F, 0F);
		toes4.setTextureSize(128, 64);

		setRotation(toes4, 1.134464F, 0F, 0F);
		//toes2.mirror = true;
		toes2 = new ModelPart(this, 18, 22);
		toes2.mirror = true;
		toes2.addCuboid(-1.0F, 0.4F, -3F, 2, 1, 4);
		toes2.setPivot(0F, 8F, 0F);
		toes2.setTextureSize(128, 64);

		setRotation(toes2, 1.134464F, 0F, 0F);
		toes1 = new ModelPart(this, 18, 22);
		toes1.addCuboid(-0F, 0.4F, -3F, 2, 1, 4);
		toes1.setPivot(0F, 8F, 0F);
		toes1.setTextureSize(128, 64);
		setRotation(toes1, 1.134464F, 0F, 0F);
		hoof1 = new ModelPart(this, 30, 0);
		hoof1.addCuboid(-0F, 0F, -6.3F, 2, 1, 2);
		hoof1.setPivot(0F, 5F, 0.5F);
		hoof1.setTextureSize(128, 64);
		setRotation(hoof1, 0F, 0F, 0F);
		hoof2 = new ModelPart(this, 30, 0);
		hoof2.mirror = true;
		hoof2.addCuboid(-0.5F, 0F, -6.3F, 2, 1, 2);
		hoof2.setPivot(0F, 5F, -0.5F);
		hoof2.setTextureSize(128, 64);

		setRotation(hoof2, 0F, 0F, 0F);
		hoof3 = new ModelPart(this, 30, 0);
		hoof3.addCuboid(-0.5F, 0F, -6.3F, 2, 1, 2);
		hoof3.setPivot(0F, 5F, -0.5F);
		hoof3.setTextureSize(128, 64);
		setRotation(hoof3, 0F, 0F, 0F);
		//hoof4.mirror = true;
		hoof4 = new ModelPart(this, 30, 0);
		hoof4.mirror = true;
		hoof4.addCuboid(-1.5F, 0F, -6.3F, 2, 1, 2);
		hoof4.setPivot(0F, 5F, -0.5F);
		hoof4.setTextureSize(128, 64);

		setRotation(hoof4, 0F, 0F, 0F);

		upperLeg4.addChild(leg4);
		leg4.addChild(lowerleg4);
		lowerleg4.addChild(toes4);
		toes4.addChild(hoof4);

		upperLeg3.addChild(leg3);
		leg3.addChild(lowerleg3);
		lowerleg3.addChild(toes3);
		toes3.addChild(hoof3);

		thigh1.addChild(calf1);
		calf1.addChild(leg1);
		leg1.addChild(toes1);
		toes1.addChild(hoof1);

		thigh2.addChild(calf2);
		calf2.addChild(leg2);
		leg2.addChild(toes2);
		toes2.addChild(hoof2);

		antler11.addChild(antler12);
		antler21.addChild(antler22);
		antler11.addChild(antler13);
		antler21.addChild(antler23);
		antler11.addChild(antler14);
		antler21.addChild(antler24);
	}

	@Override
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		running = false;
		running = ((EntityDeer)entity).getRunning();
		//int sex = 0;
		//long tempAge = 0;
		float age = 1f - TFC_Core.getPercentGrown((IAnimal)entity);
		/*if (entity instanceof EntityAnimalTFC){
			tempAge = Math.min(TFC_Time.getTotalTicks()-((EntityAnimalTFC)entity).adultTime,0);
			if(tempAge < 0) {
				age = (-1F)*tempAge / (((EntityAnimalTFC)entity).adultAge * TFC_Settings.dayLength);
			}
			sex = ((EntityAnimalTFC)entity).sex;
		}*/

		float aa =  2F - (1.0F - age);
		GL11.glTranslatef (0.0F, -6F * f5 * age/(float)Math.pow(aa,0.4),0);
		GL11.glPushMatrix ();
		float ab = (float)Math.sqrt(1.0F / aa);
		GL11.glScalef(ab, ab, ab);
		GL11.glTranslatef (0.0F, 22F * f5 * age/(float)Math.pow(aa,0.4),2F*f5*age/ab);
		if(((IAnimal)entity).getGender() == GenderEnum.MALE){
			if(aa <=1.75){
				antler11.isHidden = false;
				antler21.isHidden = false;
				if(aa <=1.5){
					antler12.isHidden = false;
					antler22.isHidden = false;
					if(aa <= 1.3){
						antler13.isHidden = false;
						antler23.isHidden = false;
						if(aa <= 1.1){
							antler14.isHidden = false;
							antler24.isHidden = false;
						}
					}
				}
			}
		}
		antler11.render(f5);
		antler21.render(f5);
		head.render(f5);
		GL11.glPopMatrix();
		GL11.glPushMatrix();
		GL11.glScalef(1.0F / aa, ab, 1.0F / aa);
		GL11.glTranslatef(0.0F, 22F * f5 * age/(float)Math.pow(aa,0.4), 0.0F);
		thigh1.render(f5);
		upperLeg4.render(f5);
		upperLeg3.render(f5);
		thigh2.render(f5);

		//snout.render(f5);
		//ear2.render(f5);
		//ear1.render(f5);
		GL11.glPopMatrix();
		GL11.glPushMatrix();
		GL11.glScalef(1.0F / aa, 1.0F / aa, 1.0F / aa);
		GL11.glTranslatef(0.0F, 22F * f5 * age, 0.0F);
		//hoof2.render(f5);
		//toes3.render(f5);
		///thigh1.render(f5);
		//calf2.render(f5);
		tail.render(f5);
		collar.render(f5);
		///upperLeg4.render(f5);
		neck.render(f5);
		rump.render(f5);
		body.render(f5);
		//leg1.render(f5);
		//leg2.render(f5);
		//leg3.render(f5);
		//leg4.render(f5);
		torso.render(f5);
		///upperLeg3.render(f5);
		//calf1.render(f5);
		//lowerleg3.render(f5);
		//lowerleg4.render(f5);
		///thigh2.render(f5);
		//toes4.render(f5);
		//toes2.render(f5);
		//toes1.render(f5);
		//hoof1.render(f5);
		//hoof3.render(f5);
		//hoof4.render(f5);
		GL11.glPopMatrix();

		/*else
		{
			if (sex == 0)
			{
				antler12.showModel = true;
				antler22.showModel = true;
				antler13.showModel = true;
				antler23.showModel = true;
				antler14.showModel = true;
				antler24.showModel = true;
				antler11.render(f5);
				antler21.render(f5);
			}
			//hoof2.render(f5);
			//toes3.render(f5);
			thigh1.render(f5);
			//ear2.render(f5);
			//ear1.render(f5);
			//calf2.render(f5);
			tail.render(f5);
			collar.render(f5);
			upperLeg4.render(f5);
			neck.render(f5);
			rump.render(f5);
			head.render(f5);
			body.render(f5);
			//leg1.render(f5);
			//leg2.render(f5);
			//leg3.render(f5);
			//leg4.render(f5);
			//snout.render(f5);
			torso.render(f5);
			upperLeg3.render(f5);
			//calf1.render(f5);
			//lowerleg3.render(f5);
			//lowerleg4.render(f5);
			thigh2.render(f5);
			//toes4.render(f5);
			//toes2.render(f5);
			//toes1.render(f5);
			//hoof1.render(f5);
			//hoof3.render(f5);
			//hoof4.render(f5);
		}    */
	}

	private void setRotation(ModelPart model, float x, float y, float z)
	{
		model.pivotX = x;
		model.pivotY = y;
		model.pivotZ = z;
	}

	@Override
	public void setRotationAngles (float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
	{
		super.setRotationAngles (f, f1, f2, f3, f4, f5, entity);

		//TerraFirmaCraft.log.info("f: "+f+"; f1: "+f1+"; f2: "+f2+"; f3: "+f3+"; f4: "+f4+"; f5: "+f5);
		f1 = Math.min(f1*7.5f, 0.75f);
		f*=0.95f;

		antler11.isHidden = true;
		antler12.isHidden = true;
		antler13.isHidden = true;
		antler14.isHidden = true;
		antler21.isHidden = true;
		antler22.isHidden = true;
		antler23.isHidden = true;
		antler24.isHidden = true;
		setRotation(antler21, f4 / (180F / (float) Math.PI), f3 / (180F / (float) Math.PI), 0F);
		setRotation(head,f4 / (180F / (float)Math.PI)+ 0.1570796F, f3 / (180F / (float)Math.PI), 0F);
		setRotation(antler11, f4 / (180F / (float) Math.PI), f3 / (180F / (float) Math.PI), 0F);
		setRotation(torso, 0.122173F, 0F, 0F);
		setRotation(collar, f4 / (3 * (180F / (float) Math.PI)) + 1.151917F, f3 / (3 * (180F / (float) Math.PI)), 0F);
		setRotation(neck, f4 / (1.5F * (180F / (float) Math.PI)) + 1.815142F, f3 / (1.5F * (180F / (float) Math.PI)), 0F);
		setRotation(rump, -0.0872665F, 0F, 0F);
		setRotation(body, 1.43117F, 0F, 0F);
		setRotation(calf1, 0.5585054F, 0F, -0.1745329F);
		setRotation(calf2, 0.5585054F, 0F, 0.1745329F);
		setRotation(toes3, 1.134464F, 0, 0);
		setRotation(hoof1,-1.134464F, 0F, 0F);
		setRotation(hoof2,-1.134464F, 0F, 0F);
		setRotation(hoof3,-1.134464F, 0F, 0F);
		setRotation(hoof4, -1.134464F, 0F, 0F);

		setRotation(tail, -1.308997F, 0F, 0F);

		setRotation(leg1, -22F/180F * (float)Math.PI, 0F, 0F);
		setRotation(leg2, -22F/180F * (float)Math.PI, 0F, 0F);
		setRotation(leg3, -0.3490659F, 0F,0.0349066F);
		setRotation(leg4, -0.3490659F, 0F,-0.0349066F);

		setRotation(upperLeg4, 0.3490659F, 0F, 0.0349066F);
		setRotation(upperLeg3, 0.3490659F, 0F, -0.0349066F);
		setRotation(thigh1, -0.1745329F, 0F, 0.1745329F);
		setRotation(thigh2, -0.1745329F, 0F, -0.1745329F);

		if(!running){
			setRotation(upperLeg4, MathHelper.cos(f / 1.5F + 3F * (float) Math.PI / 2F) * 0.7F * f1 + 0.3490659F, 0F, 0.0349066F);
			setRotation(upperLeg3, MathHelper.cos(f / 1.5F + (float) Math.PI / 2F) * 0.7F * f1 + 0.3490659F, 0F, -0.0349066F);
			setRotation(thigh1, MathHelper.cos(f / 1.5F + (float) Math.PI * 7F / 4F) * 0.7F * f1 - 0.1745329F, 0F, 0.1745329F);
			setRotation(thigh2, MathHelper.cos(f / 1.5F + 3f * (float) Math.PI / 4F) * 0.7F * f1 - 0.1745329F, 0F, -0.1745329F);
			if (MathHelper.sin(f/1.5F + (float)Math.PI/2F) * 0.7F * f1 > 0){
				setRotation(lowerleg3,MathHelper.sin(f/1.5F + (float)Math.PI/2F) * 1.4F * f1, 0F, 0F);
				setRotation(leg3,-MathHelper.sin(f/1.5F + (float)Math.PI/2F) * 0.7F * f1  -0.3490659F, 0F,0.0349066F);
				setRotation(toes3, MathHelper.sin(f / 1.5F + (float) Math.PI / 2F) * 2.1F * f1 + 1.134464F, 0, 0);
			}
			if (MathHelper.sin(f/1.5F + 1F*(float)Math.PI/2F)*0.7F * f1 < 0){
				setRotation(lowerleg4,MathHelper.sin(f/1.5F + 3F*(float)Math.PI/2F) * 1.4F * f1, 0F, 0F);
				setRotation(leg4,-MathHelper.sin(f/1.5F + 3F*(float)Math.PI/2F) * 0.7F * f1  -0.3490659F, 0F,-0.0349066F);
				setRotation(toes4, MathHelper.sin(f / 1.5F + 3F * (float) Math.PI / 2F) * 2.1F * f1 + 1.134464F, 0, 0);
			}
			if(MathHelper.sin(f/1.5F  + (float)Math.PI*7F/4F) * 0.7F * f1 > 0){
				setRotation(calf1, MathHelper.sin(f / 1.5F + (float) Math.PI * 7F / 4F) * 1.4F * f1 + 0.5585054F, 0F, -0.1745329F);
				setRotation(leg1,-MathHelper.sin(f/1.5F  + (float)Math.PI*7F/4F) * 1.4F * f1 -22F/180F * (float)Math.PI, 0F, 0F);
				setRotation(toes1, MathHelper.sin(f / 1.5F + (float) Math.PI * 7F / 4F) * 2.1F * f1 + 1.134464F, 0F, 0F);
			}			
			if (MathHelper.sin(f/1.5F + 3f*(float)Math.PI/4F) * 0.7F * f1 > 0){
				setRotation(calf2, MathHelper.sin(f / 1.5F + 3f * (float) Math.PI / 4F) * 1.4F * f1 + 0.5585054F, 0F, 0.1745329F);
				setRotation(leg2,-MathHelper.sin(f/1.5F + 3f*(float)Math.PI/4F) * 1.4F * f1 -22F/180F * (float)Math.PI, 0F, 0F);
				setRotation(toes2, MathHelper.sin(f / 1.5F + 3f * (float) Math.PI / 4F) * 2.1F * f1 + 1.134464F, 0F, 0F);
			}

		}
		else{
			if (MathHelper.cos(f/1.5F + 5*(float)Math.PI/4F) > -Math.sqrt(0.5) && MathHelper.cos(f/1.5F +5*(float)Math.PI/4F) < Math.sqrt(0.5)){
				setRotation(upperLeg4, MathHelper.cos(f / 1.5F + 5F * (float) Math.PI / 4F) * 2.8F * f1 + 0.3490659F, 0F, 0.0349066F);
			}
			if (MathHelper.sin(f/1.5F + 5F*(float)Math.PI/4F - 3F*(float)Math.PI/8)> 0){
				setRotation(lowerleg4,MathHelper.sin(f/1.5F + 5F*(float)Math.PI/4F - 3F*(float)Math.PI/8) * 3.5F * f1, 0F, 0F);
				setRotation(leg4,-MathHelper.sin(f/1.5F + 5F*(float)Math.PI/4F - 3F*(float)Math.PI/8) * 3.5F * f1  -0.3490659F, 0F,-0.0349066F);
				setRotation(toes4, MathHelper.sin(f / 1.5F + 5F * (float) Math.PI / 4F - 3F * (float) Math.PI / 8) * 2.1F * f1 + 1.134464F, 0, 0);
			}


			if (MathHelper.cos(f/1.5F + (float)Math.PI/2F) > -Math.sqrt(0.5) && MathHelper.cos(f/1.5F + (float)Math.PI/2F) < Math.sqrt(0.5)){
				setRotation(upperLeg3, MathHelper.cos(f / 1.5F + (float) Math.PI / 2F) * 2.8F * f1 + 0.3490659F, 0F, -0.0349066F);
			}
			if (MathHelper.sin(f/1.5F + (float)Math.PI/2F - 3F*(float)Math.PI/8) > 0){
				setRotation(lowerleg3,MathHelper.sin(f/1.5F + (float)Math.PI/2F - 3F*(float)Math.PI/8) * 3.5F * f1, 0F, 0F);
				setRotation(leg3,-MathHelper.sin(f/1.5F + (float)Math.PI/2F - 3F*(float)Math.PI/8)* 3.5F * f1  -0.3490659F, 0F,0.0349066F);
				setRotation(toes3, MathHelper.sin(f / 1.5F + (float) Math.PI / 2F - 3F * (float) Math.PI / 8) * 2.1F * f1 + 1.134464F, 0, 0);
			}

			setRotation(thigh1, MathHelper.cos(f / 1.5F + (float) Math.PI * 7F / 4F) * 2.8F * f1 - 0.1745329F, 0F, 0.1745329F);
			setRotation(thigh2, MathHelper.cos(f / 1.5F + 3f * (float) Math.PI / 4F) * 2.8F * f1 - 0.1745329F, 0F, -0.1745329F);
		}
	}

}
